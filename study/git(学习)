git config -l查看git配置
git clone ssh加文件名
git remote add ?? ssh 远程仓库添加？？？
git push ?? master把本地master推到??仓库
先添加？？？地址
git config -e 修改orige与？？？
remote远程
推送git push origin 本地:远程
git push -u设置本地与远程的联系
删除本地分支git branch -d 分支名
remote.origin.url=git@gitlab.tanmer.com:tanmer-corp/our-basic-rails.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
git fetch下载仓库
git log 看到分支的更改情况
当出现冲突时（打开冲突文件，完成最终代码）
直接git commit(两个仓库之间的合并)
git remote(查看仓库名)
git add HEAD <filename>
git revert (commit:???)到了远程 撤销命令
git show ？？？可以看到commit做了什么改变
git reset (commit :???) git log see ???
两个commit比较 删除多的内容
git chechout多的commit
git checkout -b merge-my-job
git checkout merge-my-job 
git cherry-pick 少的commit
git branch -d 分支名 删除分支
git checkout -- .撤销全部修改

//git合并冲突
git stash //暂停保存到当前分支
git pull //下载最新代码
git stash pop //查看冲突代码，本地修改

2.如果我们只是简单的想让服务器改动的代码替换本地改动的代码，也就是我们放弃了本地改动，那么可以执行
git checkout [本地变动文件的路径]这样，可以使该文件回到上次提交的状态，再拉取代码就不会有什么冲突。  

3.如果我们想让服务器代码完全替换和覆盖我们本地的代码改动，那么只需要执行

git fetch origin
git reset --hard origin/master

4.有时候我们修改完代码，git push的时候，会遇到报错。 如下同样是因为冲突的问题
只需要再git pull 一下，同样会发现在文件里边出现了如上图第三张的标记提示，依然手动处理冲突，在重新进行一次提交即可。

把已经写的分支提交到当前分支
1. add并且commit，再checkout，提交到当前分支  
2. add但不commit，可以stash，然后checkout回来之后stash apply，在commit，提交到当前分支  
3. add但不commit，也不stash，直接checkout，然后再commit的话，记录就在切换分支下面。 

５　git 放弃本地修改 强制更新
git fetch --all
git reset --hard origin/master

６　有多个秘钥时，把密码添加到ssh-agent
eval "$(ssh-agent -s)"
ssh-add

７　字符串中提取汉字
gsub(/[^\u4e00-\u9fa5]/,'')
